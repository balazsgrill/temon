/**
 */
package hu.textualmodeler.ast.provider;

import hu.textualmodeler.ast.util.AstAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AstItemProviderAdapterFactory extends AstAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AstItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.WhitespaceNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhitespaceNodeItemProvider whitespaceNodeItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.WhitespaceNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhitespaceNodeAdapter() {
		if (whitespaceNodeItemProvider == null) {
			whitespaceNodeItemProvider = new WhitespaceNodeItemProvider(this);
		}

		return whitespaceNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.TerminalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminalNodeItemProvider terminalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.TerminalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminalNodeAdapter() {
		if (terminalNodeItemProvider == null) {
			terminalNodeItemProvider = new TerminalNodeItemProvider(this);
		}

		return terminalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.RemovedTerminalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemovedTerminalNodeItemProvider removedTerminalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.RemovedTerminalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemovedTerminalNodeAdapter() {
		if (removedTerminalNodeItemProvider == null) {
			removedTerminalNodeItemProvider = new RemovedTerminalNodeItemProvider(this);
		}

		return removedTerminalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.InsertedTerminalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InsertedTerminalNodeItemProvider insertedTerminalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.InsertedTerminalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInsertedTerminalNodeAdapter() {
		if (insertedTerminalNodeItemProvider == null) {
			insertedTerminalNodeItemProvider = new InsertedTerminalNodeItemProvider(this);
		}

		return insertedTerminalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.InsertedFeatureSetTerminalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InsertedFeatureSetTerminalNodeItemProvider insertedFeatureSetTerminalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.InsertedFeatureSetTerminalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInsertedFeatureSetTerminalNodeAdapter() {
		if (insertedFeatureSetTerminalNodeItemProvider == null) {
			insertedFeatureSetTerminalNodeItemProvider = new InsertedFeatureSetTerminalNodeItemProvider(this);
		}

		return insertedFeatureSetTerminalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.FeatureSetValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureSetValueItemProvider featureSetValueItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.FeatureSetValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureSetValueAdapter() {
		if (featureSetValueItemProvider == null) {
			featureSetValueItemProvider = new FeatureSetValueItemProvider(this);
		}

		return featureSetValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.FeatureSetTerminalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureSetTerminalNodeItemProvider featureSetTerminalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.FeatureSetTerminalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureSetTerminalNodeAdapter() {
		if (featureSetTerminalNodeItemProvider == null) {
			featureSetTerminalNodeItemProvider = new FeatureSetTerminalNodeItemProvider(this);
		}

		return featureSetTerminalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.CompositeNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeNodeItemProvider compositeNodeItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.CompositeNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeNodeAdapter() {
		if (compositeNodeItemProvider == null) {
			compositeNodeItemProvider = new CompositeNodeItemProvider(this);
		}

		return compositeNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.SetContainmentFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetContainmentFeatureItemProvider setContainmentFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.SetContainmentFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetContainmentFeatureAdapter() {
		if (setContainmentFeatureItemProvider == null) {
			setContainmentFeatureItemProvider = new SetContainmentFeatureItemProvider(this);
		}

		return setContainmentFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.PushElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PushElementItemProvider pushElementItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.PushElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPushElementAdapter() {
		if (pushElementItemProvider == null) {
			pushElementItemProvider = new PushElementItemProvider(this);
		}

		return pushElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.textualmodeler.ast.PopElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PopElementItemProvider popElementItemProvider;

	/**
	 * This creates an adapter for a {@link hu.textualmodeler.ast.PopElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPopElementAdapter() {
		if (popElementItemProvider == null) {
			popElementItemProvider = new PopElementItemProvider(this);
		}

		return popElementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (whitespaceNodeItemProvider != null) whitespaceNodeItemProvider.dispose();
		if (terminalNodeItemProvider != null) terminalNodeItemProvider.dispose();
		if (removedTerminalNodeItemProvider != null) removedTerminalNodeItemProvider.dispose();
		if (insertedTerminalNodeItemProvider != null) insertedTerminalNodeItemProvider.dispose();
		if (insertedFeatureSetTerminalNodeItemProvider != null) insertedFeatureSetTerminalNodeItemProvider.dispose();
		if (featureSetValueItemProvider != null) featureSetValueItemProvider.dispose();
		if (featureSetTerminalNodeItemProvider != null) featureSetTerminalNodeItemProvider.dispose();
		if (compositeNodeItemProvider != null) compositeNodeItemProvider.dispose();
		if (setContainmentFeatureItemProvider != null) setContainmentFeatureItemProvider.dispose();
		if (pushElementItemProvider != null) pushElementItemProvider.dispose();
		if (popElementItemProvider != null) popElementItemProvider.dispose();
	}

}
